Week 1:
Research generally on AI and Constraint Satisfaction

Week 2:
Research on Idea of the project
Start of Project Plan
Start of Abstract writing general AI definitions, algorithms and learning types

Week 3:
Decided project idea to be based on Checkers
More research on Constraint Satisfaction and some of its techniques
Research on algorithms that would be involed in implementation:
    Minimax
    Alpha-beta pruning
    Heuristic Evaluation
Research on Checkers and its rules
Finalised Project Plan and decided timelines of development

Week 4:
Added boilerplate HTML/CSS/JS code

Week 5:
Implementing a checkers board using an array in javascript
Adding relevant HTMl and CSS as well as using DOM Manipulation to correctly
display the board

Week 6:
Researched and learned TypeScript to have a more object oriented approach 
to the development of the game.
Simply using an array to store the state of the board and continue development
is doable but will lead to complications down the line.

Restructured file system and converted existing JS code to TypeScript

Changed the TypeScript code completely to make use of classes for the Board and pieces
for a more object oriented approach. This will make the game easier to not only
implement but will scale better to as the codebase becomes larger and more complicated. 
Styled the board and added images to the pieces. The correct divs not exist to represent 
the pieces as well as the empty squares on the grid. Next step will be to clean up any
issues in the code so I can move on to focusing on being able to make moves with the pieces
and ensuring their validity.

Big updates made to both the ts and css files.

Week 7:
Starting work on move generation for checkers
Created a new branch called "checkers-moves-gen" to separate implementation of this from the 
main branch
Started work on implementing move functionality. Initially I've just added methods to validate
the moves being made and generating all possible moves a piece has. These methods have been added
to the CheckersBoard class. At the moment I am not even sure that these methods will work but will
continue to build on the program and see how it develops and make changes where they are necessary.
1 Potential Problem: The way I have manipulated the DOM to show the board and pieces could be an issue.
When I have implemented move generation, the UI representation of the board is likely to break and lose 
its symmetry.
Potential Solution: I will likely have to change the way I have added padding to the individual columns 
and the 'piece' divs, possibly restructure it entirely, hopefully the solution will be simpler than 
I am imagining it to be.

More work done on moves functionality. Several methods introduced which now allow me to move pieces to
their desired location. The validateMove method was updated as well as creating a new method of 
checking if a certain piece can capture another. Ultimately another method was created to actually 
move the pieces and capture. So far everything works fine. Next step is to work on king pieces and ensure
the methods mentioned are functioning correctly. Will work on displaying the game board to the page 
once the game is complete. Finishing game logic is of utmost importance.

Week 8:
Started implementation of King Pieces. Multiple methods required updating like validateMove(), movePiece() and possibleMoves().
There was an error previously which allowed pieces that weren't kings to move backwards which I have now corrected. 
The next step will be to create game states and players so it is now playable. I hope to complete this soon and then 
start working on making the game playable on the actual web page rather than through the console. Multiple changes 
will likely be required in the way the DOM is structured.

Created a new branch called checkers-game-state
Made new classes for the Player and the CheckersGame as well as an enum 'State'
Player tracks the color of the pieces that player has as well as their current
score and number of captured pieces.
CheckersGame creates a new CheckersBoard, two players and the state of the game.
There's multiple methods within the class for tracking and changing turns as 
well as being able to make moves on the board which includes handling captures 
and piece promotion. More work to be done here.

Initial Approach might in fact be incorrect. CheckersBoard class should be handling simply the representation of the board.
CheckersGame should handle the actual functionality of moving pieces as well as validating those moves. Instead of essentially
rewriting those methods again in the CheckersGame class I should be removing them from board class and adding them to the game class 
with changes that would ensure theres two different players, each of whom have their own turns etc.

Scores are correctly displayed now as well as turns correctly being updated. The code now checks for chain captures for a piece 
and if there is another capture available, it does not change the turn of the player until the capture is completed.
It is going to be difficult to have a separate method to check for possible captures on the board and ensuring that only capture moves  
are being made due to the complexity of the task as well as checking if the method is working correctly through the console.
Potentially something to work on after the DOM updates are made. 

Week 9:
Completed the second condition for checking end of game. Only thing remaining is adding "forced jumps" functionality. I will be doing
that as soon as I have made the game playable on the DOM or potentially in the future as it is not a 'fixed' rule in checkers, some 
variants use it and others do not. So far the game logic is solid and error-free, will test it further and then work on optimization 
and refactoring. 

Created a third branch called dom-manipulation, to start working on the visual representation of the board as well as making it playable
on the actual page rather than the console. Had to make some changes to the HTML structure to add data-rows and cols to be able to actually 
be able to make moves on the page and create child divs in those particular columns and delete them from the previous ones. 
Simplified the startBoard() function to simply create the board and the relevant divs for where there are pieces as well as adding event 
listeners to those pieces which will call the selectPiece() function. selectPiece() has gone through some changes as well to able to 
correctly select the piece that the user wants, removing any previous highlighted locations of other pieces as well as their selection. 
When a piece is selected a change is made to that div to add .selected which by the CSS adds a golden border around that particular piece. 
Clicking the piece also logs the array of moves available to it and that is use to then highlight the relevant rows and columns that the 
piece can then move to. The executeMove() function then is attached as an event listener to the selected piece. 
Initially the executeMove() function was becoming incredibly complicated and the more I developed it the more the function became redundant 
as it started making use of the same validation and capture checks that the CheckersGame movePiece() function already internally checked for 
before making a move. I decided to restructure this part of the code as it made a lot more sense to instead update the DOM to reflect the internal 
state of the game board rather after a move is made than constantly updating the individual parts of the HTML structure. 
The updateBoardDOM() function simply removes all pieces from the board initially as well as their individual event listeners and then iterates through 
the entire board array again, creating the relevant piece divs as children to their relevant columns as well as attaching event listeners to them. 
This allowed the game to be completely playable, however, there are still some minor bugs that I have to fix. 

Next Steps till interim report are:
1. Fully Playable (in progress)
2. Documentation
3. Unit Testing!
4. Multiple Pages
5. Simple AI (hopefully)
6. Backend (very unlikely because of remaining time)

The issue now is that there's multiple event listeners that are created on specific columns that a piece is moved to. Because of this there are times 
where a piece is not correctly selected or its selection and highlighted potential locations arent shown even though it can be moved. Trying to figure
out how to fix this at the moment. 
Made modifications to updateBoardDOM() function to simply remove everything entirely and once that is done, call the populateBoard() function, the same 
function that is used to start the game. 

Now that the game is complete I am able to make some CSS changes including king piece images as well as adding the relevant check for king pieces to make 
their divs in the populateBoard() function. Made pieces a bit bigger as well as adding a border to the entire board.

Significant updates to the DOM so there's a much better looking page now. Will work on it further to make it even more visually appealing.

Removed a lot of the comments for classes and methods and instead made use of JSDoc for better code readability, maintenance and documentation.
Starting to write unit tests. In order to do this I had to install and setup jest and its config file. Was getting errors initially as the test
was going through the dom manipulation code. In order to counter-act that I separated the checkers game related classes into a separate file and 
the dom manipulation into a separate one. This will also allows for easier code management and ensures that the DOM manipulation code depends on 
the game logic rather than the other way around.
Testing for the main classes in the code, namely, CheckersBoard and CheckersGame is complete, the game is working perfectly now. The final end game 
condition that was remaining, was checking for if the current player has no valid moves, that is also complete and I've developed a scoring system 
that favours the accumulated scores of each player to decide the final outcome of the match. However, if there's no valid moves and each player has
the same score, then the match will ultimately be a draw. Next things to work on are:
1. Home Page
2. Rules Page
3. About Page

Main Page is fully developed now, there's a starting initial screen where two users can enter their names and start the game anew. Then there is the 
same board that is displayed so the game can be played. There's more visual feedback now with pieces responding to mouse hovers and clicks. At the 
end of the game there is a scorecard that is shown with the score of both players as well as an option to start a new game. The page has also been 
made responsive to different screen sizes. 

The next step is to develop multiple web pages as well as develop even a simple AI. I still have to decide which problem I will tackle first as making 
multiple web pages would be relatively simple and possible to finish within a day. However, developing the AI to play against would be a tougher challenge
as the Minimax algorithm would be a relatively new experience to code.

I want to at least develop a simple minimax algorithm with a depth limit of one to start off it's development, see it's performance and improve it
further. After researching a lot on just the minmax algorithm and game trees I should be able to start the development of the AI. 

Started off development of the AI player. This has been quite the strenuous process. Initially, I just had to make a function that evaluates the current 
state of the game and gives it an appropriate score for the AI player based on number of regular and king pieces for each player. 
The next step was to find a way for the AI to simulate moves to assess whether or not that move will be beneficial or not. For this I had to make two 
functions in the CheckersGame class to allow the AI to make moves (simulateMove function) and then undoes them after seeing the result (undoSimulation).
This was necessary as the movePiece() function would simply change the state of the board with no way of going back to the previous state, since it does 
not allow for invalid moves or redos. Tested these two methods comprehensively. The next logical step, I believe to be the development of the minimax 
algorithm. I hope to finish this by Sunday so I can flesh out the webpage to allow for local 2 player games and games against the AI. 

Developed a minimax algorithm that went through a series of changes. Initially the minimax algorithm was passing tests until it failed for chain captures.
Then I started checking to see the state of the board as well as whether simulateMove and undoSimulation moves were working correctly. After ensuring that 
those work I started testing the state of the board and overall process that the algorithm was going through once called. There, I realised that the board 
was left in an inconsistent state, the algorithm either kept on selecting the same moves or incorrect moves as well as returning the incorrect score if it 
the AI player had more pieces than the user. I changed the evaluation function to simply use the number of pieces that each player have, properties that 
I initialised in the Player class to keep track of it. The number of pieces and kings of each player are now updated every time there is a capture. I,
then tested this to ensure that this is working correctly. The algorithm then seemed to 'improve' but was still giving the incorrect results, for example:
If the AI could make a capture out of all the moves available to it in a turn, the evaluation score (based on AI pieces/kings - user pieces/kings) should 
be 1, but it always returned 0. At this point, I was unsure of what to do and how to go about the AI's development. I tried initialising variables in 
the minimax algorithm to hold copies of the game and act on that but it did not work as those variables simply contained the reference to the actual 
game board, which should absolutely not be affected by minimax until it has made it's decision regarding a move. I, then decided to try making deep copies 
of the game instance, the players and pieces and essentially have the AI, play it's own game during it's decision making process to asses which move is most 
beneficial. This led to it returning the correct move as well as the correct score. I believe, however, that this way of using minimax is likely quite
inefficient as it is creating multiple copies of the game every time it recursively calls itself. When I tried to test the function at depth 5, it was never 
ending, otherwise at depth 1 or 2 it was taking about 1-3 seconds which, for now, is acceptable. I will have to refactor the way I have written the algorithm 
in the future to make it more efficient and also more competitive. Even the evaluation function currently used is quite simple and does not take into account 
positional values of the board, potential moves that could setup in the future single or multiple captures, be it to the AI itself or the player. This is 
definitely, something to work on in the future. I also realised I did not really need to use the simulateMove and undoSimulation methods as the AI is now 
operating on it's own version of the board which will not affect the actual game board. However, I, will leave these methods in case I decide to change 
my approach in the future. The AI player class is also an extension of the regular Player class as it is important that it inherits those same properties.

The AI is finally working and is now playable against on the DOM. Some issues at the beginning were the updated scores for the AI player were incorrect as 
it was reporting captured pieces and it's score in the 100's which is simply not possible in a game of 12 pieces per player. This was because minimax used 
the regular movePiece function which also handled piece captures and updated scores accordingly. I, then made the same movePiece function for the AI separately 
but without the handlePieceCapture method and simply decremented the number of pieces for whichever player lost a piece in that particular turn. This resulted 
in the correct scores being displayed. The second issue was that in endgame conditions, if the AI only had a single piece left and the player had multiple, if 
it's final piece was in such a position that any move would result in it being catured and the game ending, it simply would not move. This is because in the minimax 
function where best move and best score for a move is updated and returned, it was not meeting the condition of evaluatedScore < bestScore as the recursive calls 
would always return -Infinity for the maximizing player in this situation. This is now fixed as if the minimax is not able to find the best move in such a situation 
it simply, chooses a move and returns it. This can be improved when the evaluation function is improved. Current issues to note are:

1. The AI sometimes does not chain capture if it can, the turn is not changed, but the user has to manually make the move for it so the turn is changed.
2. The DOM updates are very jarring as a user, there's no smooth transition to piece placement since every time a move is made, the board is simply updated 
with the new state. This is relatively 'okay' in local 2 player mode as each player knows exactly what move they and the other player are making but is not 
a nice experience when there's no visual indication of what move the AI will be making. This can and should be improved for better clarity. 

The game is finally complete with a simple AI opponent functionality. This is going to improved in the future with a better heuristic as well as reworking the minimax 
algorithm to be more efficient. The website is now complete with About, RUles and Home pages fully styled. The work that i had planned for the first term is now finally 
complete, HOORAY!

Much work will be done over the winter break, with the first step being to learn React and convert this project into React and then focus on the AI components. 

Week 11-12:
Minimax is now correctly implemented and functions as expected. The heuristic is the focus for now to ensure the AI player is "smart" and provides a compeititve playing
experience. A lot of experimentation and testing is done on this to check and see how the AI makes decisions during the game and whether or not they are successful in 
games played

Working on a new branch to implement initially different optimal opening moves that the AI can make at the beginning of the game. The next task is to flesh out the AI's 
early-game behaviour moving onto mid and endgame after that.

Using the opening moves available on http://www.quadibloc.com/other/bo0102.htm, I've included all the opening moves as a map object for the AI to be able to access.
Since the AI always goes second, it will have the correct "counter" to optimal opening moves. I then had to create a way for the AI to check whether the user is making 
standard opening moves to start the game, and which move it should make in response to that. If the ongoing opening sequence is complete or the user plays a random move 
then the AI simply uses the minimax algorithm for it's decision making. Using the minimax algorithm in the early stages of the game seemed a bit unnecessary as in 
strategy games like Checkers, there are certain standard moves made to start the game and optimal moves made in response to them.

Week 13:
A lot more work has been done on the heuristic. I felt like I had hit a brick wall with regards to it's development, I tried many different combinations within the 
heuristic as well as looking online for optimal checkers strategy (google really wasn't much help). I persisted as there were a few factors I was sure could make a 
difference. I took a deeper look at the internal game functions and found some bugs that were definitely causing an issue with the calculation of the evaluated score.
I was also able to single out the heuristics that were contributing to abnormal scores. I am currently further testing the AI as well as making adjustments to the 
heuristic and exploring further options to improve the AI.

Week 14:
I've completed the AI heuristics branch (for now) with changes to the heuristic, making it more compeititve also with the integration of standard opening moves and 
counters. This still needs some work to make it more compeititve but I am for the moment satisfied with the performance of the AI. Further tweaking and testing will 
result in further improvements, of course. For now this chapter is closed. I was also able to fix some of the bugs that had been in the game that negatively influenced 
the score calculation in minimax. With fixes to that, it is also easier to see the valuation minimax gives to it's independent moves. Moving on, some things to implement
will be forced captures, correct chain capture sequences and then full focus on Advanced Web Dev side of the project.

Forced captures have now been implemented in the game. There were a few conditions to look at within the possibleMoves and changeTurn methods as well as creating a variable 
to track whether a player can make a capture in their turn or not. Additionally, users have the option to play versus each other or against the AI with the regular rules 
or with forced captures on. The AI heuristic will have to be changed for the forced captures as the dynamic of the game changes. The AI also seems to "give up" almost when 
it is in a position in a forced capture game where it has only one remaining piece which will be captured in the following turn. This needs testing and experimentation to 
resolve. For now performance of the AI is meant to be "okay-ish" for the regular mode and not good/correctly functioning in the enforced mode. Next step is to implement 
chain capture sequences and then I move onto more web dev stuff.

Successfully, chain captures have also been fixed. The game is now full functional and working as intended which is great progress. Now the focus of this project can go
back to Advanced Web Dev.

The next step now is to study and understand Firebase as well as implement it as the backend service for this webapp. I will be implementing a login and signup 
authentication for users to make accounts. Currently firebase has been setup in this project and theres a website deployed via firebase for a public domain to access. 
A signup and login page has also been created to implement this feature soon. Since this is a new technology for me, I will have to take time to study and understand it.