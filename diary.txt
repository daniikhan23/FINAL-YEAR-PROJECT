Week 1:
Research generally on AI and Constraint Satisfaction

Week 2:
Research on Idea of the project
Start of Project Plan
Start of Abstract writing general AI definitions, algorithms and learning types

Week 3:
Decided project idea to be based on Checkers
More research on Constraint Satisfaction and some of its techniques
Research on algorithms that would be involed in implementation:
    Minimax
    Alpha-beta pruning
    Heuristic Evaluation
Research on Checkers and its rules
Finalised Project Plan and decided timelines of development

Week 4:
Added boilerplate HTML/CSS/JS code

Week 5:
Implementing a checkers board using an array in javascript
Adding relevant HTMl and CSS as well as using DOM Manipulation to correctly
display the board

Week 6:
Researched and learned TypeScript to have a more object oriented approach 
to the development of the game.
Simply using an array to store the state of the board and continue development
is doable but will lead to complications down the line.

Restructured file system and converted existing JS code to TypeScript

Changed the TypeScript code completely to make use of classes for the Board and pieces
for a more object oriented approach. This will make the game easier to not only
implement but will scale better to as the codebase becomes larger and more complicated. 
Styled the board and added images to the pieces. The correct divs not exist to represent 
the pieces as well as the empty squares on the grid. Next step will be to clean up any
issues in the code so I can move on to focusing on being able to make moves with the pieces
and ensuring their validity.

Big updates made to both the ts and css files.

Week 7:
Started work on implementing move functionality. Initially I've just added methods to validate
the moves being made and generating all possible moves a piece has. These methods have been added
to the CheckersBoard class. At the moment I am not even sure that these methods will work but will
continue to build on the program and see how it develops and make changes where they are necessary.
1 Potential Problem: The way I have manipulated the DOM to show the board and pieces could be an issue.
When I have implemented move generation, the UI representation of the board is likely to break and lose 
its symmetry.
Potential Solution: I will likely have to change the way I have added padding to the individual columns 
and the 'piece' divs, possibly restructure it entirely, hopefully the solution will be simpler than 
I am imagining it to be.

More work done on moves functionality. Several methods introduced which now allow me to move pieces to
their desired location. The validateMove method was updated as well as creating a new method of 
checking if a certain piece can capture another. Ultimately another method was created to actually 
move the pieces and capture. So far everything works fine. Next step is to work on king pieces and ensure
the methods mentioned are functioning correctly. Will work on displaying the game board to the page 
once the game is complete. Finishing game logic is of utmost importance.
