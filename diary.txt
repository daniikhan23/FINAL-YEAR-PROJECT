Week 1:
Research generally on AI and Constraint Satisfaction

Week 2:
Research on Idea of the project
Start of Project Plan
Start of Abstract writing general AI definitions, algorithms and learning types

Week 3:
Decided project idea to be based on Checkers
More research on Constraint Satisfaction and some of its techniques
Research on algorithms that would be involed in implementation:
    Minimax
    Alpha-beta pruning
    Heuristic Evaluation
Research on Checkers and its rules
Finalised Project Plan and decided timelines of development

Week 4:
Added boilerplate HTML/CSS/JS code

Week 5:
Implementing a checkers board using an array in javascript
Adding relevant HTMl and CSS as well as using DOM Manipulation to correctly
display the board

Week 6:
Researched and learned TypeScript to have a more object oriented approach 
to the development of the game.
Simply using an array to store the state of the board and continue development
is doable but will lead to complications down the line.

Restructured file system and converted existing JS code to TypeScript

Changed the TypeScript code completely to make use of classes for the Board and pieces
for a more object oriented approach. This will make the game easier to not only
implement but will scale better to as the codebase becomes larger and more complicated. 
Styled the board and added images to the pieces. The correct divs not exist to represent 
the pieces as well as the empty squares on the grid. Next step will be to clean up any
issues in the code so I can move on to focusing on being able to make moves with the pieces
and ensuring their validity.

Big updates made to both the ts and css files.

Week 7:
Starting work on move generation for checkers
Created a new branch called "checkers-moves-gen" to separate implementation of this from the 
main branch
Started work on implementing move functionality. Initially I've just added methods to validate
the moves being made and generating all possible moves a piece has. These methods have been added
to the CheckersBoard class. At the moment I am not even sure that these methods will work but will
continue to build on the program and see how it develops and make changes where they are necessary.
1 Potential Problem: The way I have manipulated the DOM to show the board and pieces could be an issue.
When I have implemented move generation, the UI representation of the board is likely to break and lose 
its symmetry.
Potential Solution: I will likely have to change the way I have added padding to the individual columns 
and the 'piece' divs, possibly restructure it entirely, hopefully the solution will be simpler than 
I am imagining it to be.

More work done on moves functionality. Several methods introduced which now allow me to move pieces to
their desired location. The validateMove method was updated as well as creating a new method of 
checking if a certain piece can capture another. Ultimately another method was created to actually 
move the pieces and capture. So far everything works fine. Next step is to work on king pieces and ensure
the methods mentioned are functioning correctly. Will work on displaying the game board to the page 
once the game is complete. Finishing game logic is of utmost importance.

Week 8:
Started implementation of King Pieces. Multiple methods required updating like validateMove(), movePiece() and possibleMoves().
There was an error previously which allowed pieces that weren't kings to move backwards which I have now corrected. 
The next step will be to create game states and players so it is now playable. I hope to complete this soon and then 
start working on making the game playable on the actual web page rather than through the console. Multiple changes 
will likely be required in the way the DOM is structured.

Created a new branch called checkers-game-state
Made new classes for the Player and the CheckersGame as well as an enum 'State'
Player tracks the color of the pieces that player has as well as their current
score and number of captured pieces.
CheckersGame creates a new CheckersBoard, two players and the state of the game.
There's multiple methods within the class for tracking and changing turns as 
well as being able to make moves on the board which includes handling captures 
and piece promotion. More work to be done here.

Initial Approach might in fact be incorrect. CheckersBoard class should be handling simply the representation of the board.
CheckersGame should handle the actual functionality of moving pieces as well as validating those moves. Instead of essentially
rewriting those methods again in the CheckersGame class I should be removing them from board class and adding them to the game class 
with changes that would ensure theres two different players, each of whom have their own turns etc.

Scores are correctly displayed now as well as turns correctly being updated. The code now checks for chain captures for a piece 
and if there is another capture available, it does not change the turn of the player until the capture is completed.
It is going to be difficult to have a separate method to check for possible captures on the board and ensuring that only capture moves  
are being made due to the complexity of the task as well as checking if the method is working correctly through the console.
Potentially something to work on after the DOM updates are made. 

Week 9:
Completed the second condition for checking end of game. Only thing remaining is adding "forced jumps" functionality. I will be doing
that as soon as I have made the game playable on the DOM or potentially in the future as it is not a 'fixed' rule in checkers, some 
variants use it and others do not. So far the game logic is solid and error-free, will test it further and then work on optimization 
and refactoring. 

Created a third branch called dom-manipulation, to start working on the visual representation of the board as well as making it playable
on the actual page rather than the console. Had to make some changes to the HTML structure to add data-rows and cols to be able to actually 
be able to make moves on the page and create child divs in those particular columns and delete them from the previous ones. 
Simplified the startBoard() function to simply create the board and the relevant divs for where there are pieces as well as adding event 
listeners to those pieces which will call the selectPiece() function. selectPiece() has gone through some changes as well to able to 
correctly select the piece that the user wants, removing any previous highlighted locations of other pieces as well as their selection. 
When a piece is selected a change is made to that div to add .selected which by the CSS adds a golden border around that particular piece. 
Clicking the piece also logs the array of moves available to it and that is use to then highlight the relevant rows and columns that the 
piece can then move to. The executeMove() function then is attached as an event listener to the selected piece. 
Initially the executeMove() function was becoming incredibly complicated and the more I developed it the more the function became redundant 
as it started making use of the same validation and capture checks that the CheckersGame movePiece() function already internally checked for 
before making a move. I decided to restructure this part of the code as it made a lot more sense to instead update the DOM to reflect the internal 
state of the game board rather after a move is made than constantly updating the individual parts of the HTML structure. 
The updateBoardDOM() function simply removes all pieces from the board initially as well as their individual event listeners and then iterates through 
the entire board array again, creating the relevant piece divs as children to their relevant columns as well as attaching event listeners to them. 
This allowed the game to be completely playable, however, there are still some minor bugs that I have to fix. 

Next Steps till interim report are:
1. Fully Playable (in progress)
2. Documentation
3. Unit Testing!
4. Multiple Pages
5. Simple AI (hopefully)
6. Backend (very unlikely because of remaining time)

The issue now is that there's multiple event listeners that are created on specific columns that a piece is moved to. Because of this there are times 
where a piece is not correctly selected or its selection and highlighted potential locations arent shown even though it can be moved. Trying to figure
out how to fix this at the moment. 
Made modifications to updateBoardDOM() function to simply remove everything entirely and once that is done, call the populateBoard() function, the same 
function that is used to start the game. 

Now that the game is complete I am able to make some CSS changes including king piece images as well as adding the relevant check for king pieces to make 
their divs in the populateBoard() function. Made pieces a bit bigger as well as adding a border to the entire board