/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/checkersAI.ts":
/*!**************************************!*\
  !*** ./src/components/checkersAI.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckersAI: () => (/* binding */ CheckersAI)\n/* harmony export */ });\n/* harmony import */ var _checkersGame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkersGame */ \"./src/components/checkersGame.ts\");\n\nclass CheckersAI extends _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Player {\n    constructor(name, color, game, depth) {\n        super(name, color);\n        this.game = game;\n        this.depth = depth;\n        this.openings = this.openingSet();\n        this.currentOpening = null;\n    }\n    heuristic(game) {\n        let score = 0;\n        let aiPieceCount = game.players[1].numOfPieces, playerPieceCount = game.players[0].numOfPieces;\n        let aiKingCount = 0, playerKingCount = 0;\n        score += aiPieceCount * 15 - playerPieceCount * 15;\n        score -= this.countOpponentCapturesPossible(_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red, game);\n        for (let row = 0; row < 8; row++) {\n            for (let col = 0; col < 8; col++) {\n                let piece = game.getPiece(row, col);\n                if (piece) {\n                    if (piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black && piece.isKing === true) {\n                        aiKingCount++;\n                    }\n                    else if (piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red && piece.isKing === true) {\n                        playerKingCount++;\n                    }\n                    if (col >= 2 && col <= 5 && row >= 3 && row <= 4) {\n                        score += piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? 2.5 : -2.5;\n                    }\n                    if (row >= 3 && row <= 4 && col < 2 && col > 5) {\n                        score += piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? 0.5 : -0.5;\n                    }\n                    if (game.numOfTurns < 10) {\n                        if (piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black && row === 0) {\n                            if (col === 1 || col === 5) {\n                                score += 10;\n                            }\n                        }\n                        else if (piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red && row === 7) {\n                            if (col === 2 || col === 6) {\n                                score -= 10;\n                            }\n                        }\n                    }\n                    if (row >= 1 && row <= 6 && col >= 1 && col <= 6) {\n                        let backwardRow = piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? row - 1 : row + 1;\n                        let leftProtectionPiece = game.getPiece(backwardRow, col - 1);\n                        let rightProtectionPiece = game.getPiece(backwardRow, col + 1);\n                        if (leftProtectionPiece &&\n                            leftProtectionPiece.color === piece.color) {\n                            score += piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? 6 : -6;\n                        }\n                        if (rightProtectionPiece &&\n                            rightProtectionPiece.color === piece.color) {\n                            score += piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? 6 : -6;\n                        }\n                    }\n                    if (game.numOfTurns < 15) {\n                        if (piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black) {\n                            if (row === 0) {\n                                if (col === 1 || col === 3 || col == 5) {\n                                    score += 5;\n                                }\n                            }\n                            if (row === 1) {\n                                if (col === 2 || col === 4) {\n                                    score += 5;\n                                }\n                            }\n                            if (row === 2) {\n                                if (col === 3) {\n                                    score += 5;\n                                }\n                            }\n                        }\n                    }\n                    if (!game.isVulnerable(row, col)) {\n                        score += piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? -6 : 6;\n                    }\n                }\n            }\n        }\n        score += aiKingCount * 20 - playerKingCount * 20;\n        return score;\n    }\n    countOpponentCapturesPossible(color, game) {\n        let captureCount = 0;\n        for (let row = 0; row < 8; row++) {\n            for (let col = 0; col < 8; col++) {\n                const piece = game.getPiece(row, col);\n                if (piece && piece.color === color) {\n                    const moves = game.possibleMoves(row, col);\n                    captureCount += moves.filter((move) => Math.abs(move.startRow - move.endRow) === 2).length;\n                }\n            }\n        }\n        return captureCount;\n    }\n    openingSet() {\n        const openings = new Map();\n        openings.set(\"Old Fourteenth\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(7, 0, 6, 1),\n        ]);\n        openings.set(\"Alma\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(7, 2, 6, 1),\n        ]);\n        openings.set(\"Centre\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(4, 3, 3, 4),\n        ]);\n        openings.set(\"Glasgow\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 1),\n        ]);\n        openings.set(\"Laird and Lady\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 4, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 7, 4, 5),\n        ]);\n        openings.set(\"Black Doctor\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 4, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 2, 5, 4),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 3, 4, 5),\n        ]);\n        openings.set(\"Laird and Lady Refused\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 6, 2, 5),\n        ]);\n        openings.set(\"Glasgow-Whilter\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 6, 2, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 1),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 4, 2, 3),\n        ]);\n        openings.set(\"Nailor\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 4, 2, 3),\n        ]);\n        openings.set(\"Tillicoultry\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 4),\n        ]);\n        openings.set(\"Will o' the Wisp\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n        ]);\n        openings.set(\"Defiance\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 2, 2, 3),\n        ]);\n        openings.set(\"Fife\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 7, 5, 6),\n        ]);\n        openings.set(\"Souter\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 5, 5, 6),\n        ]);\n        openings.set(\"Whilter-I\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 5),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 3, 5, 2),\n        ]);\n        openings.set(\"Whilter-II\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 3, 5, 2),\n        ]);\n        openings.set(\"Whilter-Exchange\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 3, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 4),\n        ]);\n        openings.set(\"Maid of the Mill\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(4, 3, 3, 4),\n        ]);\n        openings.set(\"Douglas\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(7, 0, 6, 1),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 6, 2, 5),\n        ]);\n        openings.set(\"Pioneer\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 6, 2, 5),\n        ]);\n        openings.set(\"White Dyke\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 5),\n        ]);\n        openings.set(\"Wagram\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 1, 3, 0),\n        ]);\n        openings.set(\"Boston\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 6, 4, 7),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 6, 4, 5),\n        ]);\n        openings.set(\"Dyke\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 6),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(4, 3, 3, 2),\n        ]);\n        openings.set(\"Cross\", [new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3), new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 4)]);\n        openings.set(\"Waterloo\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 4),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(3, 4, 4, 5),\n        ]);\n        openings.set(\"Ayrshire Lassie\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 1, 3, 0),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(6, 1, 5, 2),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(1, 0, 2, 1),\n        ]);\n        openings.set(\"Switcher\", [new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3), new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 7, 3, 6)]);\n        openings.set(\"Single Corner\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 5, 3, 4),\n        ]);\n        openings.set(\"Second Double Corner\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 3),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 1, 3, 2),\n        ]);\n        openings.set(\"Bristol\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 1),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 1, 3, 0),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(4, 1, 3, 2),\n        ]);\n        openings.set(\"Paisley\", [new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 1), new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 1, 3, 2)]);\n        openings.set(\"Bristol-Cross\", [\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(5, 2, 4, 1),\n            new _checkersGame__WEBPACK_IMPORTED_MODULE_0__.Moves(2, 3, 3, 4),\n        ]);\n        return openings;\n    }\n    identifyOpening() {\n        let foundOpening = false;\n        if (this.game.numOfTurns <\n            Math.max(...Array.from(this.openings.values()).map((o) => o.length))) {\n            for (const [name, moves] of this.openings) {\n                if (this.game.playerOneMoves.length <= moves.length / 2) {\n                    const sequenceMatch = this.game.playerOneMoves.every((move, index) => {\n                        return moves[index * 2].equals(move);\n                    });\n                    if (sequenceMatch) {\n                        this.currentOpening = name;\n                        foundOpening = true;\n                        break;\n                    }\n                }\n            }\n        }\n        if (!foundOpening) {\n            this.currentOpening = null;\n        }\n    }\n    minimax(game, depth, alpha, beta, maximizingPlayer) {\n        game.checkEndOfGame();\n        if (depth == 0 || game.currentState === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.State.gameFinished) {\n            let score = this.heuristic(game);\n            return [score, null];\n        }\n        let bestScore = maximizingPlayer ? -Infinity : Infinity;\n        let bestMove = null;\n        if (maximizingPlayer) {\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = game.getPiece(row, col);\n                    if (piece && piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black) {\n                        const moves = game.possibleMoves(row, col);\n                        for (const move of moves) {\n                            const gameCopy = game.deepCopyGame();\n                            gameCopy.moveAI(move.startRow, move.startCol, move.endRow, move.endCol);\n                            const [evaluatedScore] = this.minimax(gameCopy, depth - 1, alpha, beta, false);\n                            alpha = Math.max(alpha, evaluatedScore);\n                            if (beta <= alpha) {\n                                bestMove = move;\n                                bestScore = evaluatedScore;\n                                break;\n                            }\n                            if (evaluatedScore > bestScore) {\n                                bestScore = evaluatedScore;\n                                bestMove = move;\n                            }\n                        }\n                    }\n                }\n            }\n            return [bestScore, bestMove];\n        }\n        else {\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = game.getPiece(row, col);\n                    if (piece && piece.color === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red) {\n                        const moves = game.possibleMoves(row, col);\n                        for (const move of moves) {\n                            const gameCopy = game.deepCopyGame();\n                            gameCopy.moveAI(move.startRow, move.startCol, move.endRow, move.endCol);\n                            const [evaluatedScore] = this.minimax(gameCopy, depth - 1, alpha, beta, true);\n                            beta = Math.min(beta, evaluatedScore);\n                            if (beta <= alpha) {\n                                bestMove = move;\n                                bestScore = evaluatedScore;\n                                break;\n                            }\n                            if (evaluatedScore < bestScore) {\n                                bestScore = evaluatedScore;\n                                bestMove = move;\n                            }\n                        }\n                    }\n                }\n            }\n            return [bestScore, bestMove];\n        }\n    }\n    makeMove() {\n        if (this.game.currentState === _checkersGame__WEBPACK_IMPORTED_MODULE_0__.State.gameFinished) {\n            console.log(\"Game is finished. AI cannot make a move.\");\n            this.game.changeTurn();\n        }\n        else {\n            this.identifyOpening();\n            if (this.currentOpening) {\n                const move = this.getOpeningMove();\n                if (move) {\n                    this.game.movePiece(move.startRow, move.startCol, move.endRow, move.endCol);\n                }\n                else {\n                    this.playMinimaxMove();\n                }\n            }\n            else if (this.game.numOfTurns === 1 &&\n                this.game.getPiece(3, 4) === null) {\n                this.game.movePiece(2, 5, 3, 4);\n            }\n            else if (this.game.numOfTurns === 3 &&\n                this.game.getPiece(2, 5) === null) {\n                this.game.movePiece(1, 6, 2, 5);\n            }\n            else if (this.game.numOfTurns === 5 &&\n                this.game.getPiece(1, 6) === null) {\n                this.game.movePiece(0, 7, 1, 6);\n            }\n            else {\n                this.playMinimaxMove();\n            }\n        }\n    }\n    playMinimaxMove() {\n        const [score, move] = this.minimax(this.game, this.depth, -Infinity, Infinity, true);\n        if (move) {\n            this.game.movePiece(move === null || move === void 0 ? void 0 : move.startRow, move === null || move === void 0 ? void 0 : move.startCol, move === null || move === void 0 ? void 0 : move.endRow, move === null || move === void 0 ? void 0 : move.endCol);\n            console.log(`AI moved from: (${move === null || move === void 0 ? void 0 : move.startRow}, ${move === null || move === void 0 ? void 0 : move.startCol}) to (${move === null || move === void 0 ? void 0 : move.endRow}, ${move === null || move === void 0 ? void 0 : move.endCol})`);\n            console.log(`Evaluated Score of move: ${score}`);\n        }\n        else {\n            console.log(`${this.game.players[1].name} has no valid moves!`);\n            this.game.changeTurn();\n        }\n    }\n    getOpeningMove() {\n        if (this.currentOpening) {\n            const sequence = this.openings.get(this.currentOpening);\n            if (sequence && this.game.numOfTurns < sequence.length) {\n                return sequence[this.game.numOfTurns];\n            }\n        }\n        return null;\n    }\n}\n\n\n//# sourceURL=webpack://project/./src/components/checkersAI.ts?");

/***/ }),

/***/ "./src/components/checkersGame.ts":
/*!****************************************!*\
  !*** ./src/components/checkersGame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckersBoard: () => (/* binding */ CheckersBoard),\n/* harmony export */   CheckersGame: () => (/* binding */ CheckersGame),\n/* harmony export */   CheckersPiece: () => (/* binding */ CheckersPiece),\n/* harmony export */   Moves: () => (/* binding */ Moves),\n/* harmony export */   PieceColor: () => (/* binding */ PieceColor),\n/* harmony export */   Player: () => (/* binding */ Player),\n/* harmony export */   State: () => (/* binding */ State)\n/* harmony export */ });\nvar State;\n(function (State) {\n    State[State[\"inProgress\"] = 0] = \"inProgress\";\n    State[State[\"gameFinished\"] = 1] = \"gameFinished\";\n})(State || (State = {}));\nclass Player {\n    constructor(name, color) {\n        this.name = name;\n        this.color = color;\n        this.score = 0;\n        this.capturedPieces = 0;\n        this.numOfPieces = 12;\n        this.numOfKings = 0;\n        this.capturesAvailable = false;\n    }\n    updateCapturedPieces(count) {\n        this.capturedPieces += count;\n    }\n    updateScore(score) {\n        this.score += score;\n    }\n    deepCopyPlayer() {\n        let copiedPlayer = new Player(this.name, this.color);\n        copiedPlayer.numOfPieces = this.numOfPieces;\n        copiedPlayer.numOfKings = this.numOfKings;\n        return copiedPlayer;\n    }\n}\nvar PieceColor;\n(function (PieceColor) {\n    PieceColor[\"Black\"] = \"black\";\n    PieceColor[\"Red\"] = \"red\";\n})(PieceColor || (PieceColor = {}));\nclass CheckersPiece {\n    constructor(color, isKing = false, captureStatus = false) {\n        this.color = color;\n        this.isKing = isKing;\n        this.captureStatus = false;\n    }\n    makeKing() {\n        this.isKing = true;\n    }\n    captureCheck() {\n        this.captureStatus = true;\n    }\n    deepCopyPiece() {\n        const copiedPiece = new CheckersPiece(this.color, this.isKing);\n        return copiedPiece;\n    }\n}\nclass Moves {\n    constructor(startRow, startCol, endRow, endCol) {\n        this.startRow = startRow;\n        this.startCol = startCol;\n        this.endRow = endRow;\n        this.endCol = endCol;\n    }\n    equals(checkMove) {\n        return (this.startRow === checkMove.startRow &&\n            this.startCol === checkMove.startCol &&\n            this.endRow === checkMove.endRow &&\n            this.endCol === checkMove.endCol);\n    }\n}\nclass CheckersBoard {\n    constructor() {\n        this.board = [];\n        this.initializeBoard();\n    }\n    initializeBoard() {\n        for (let row = 0; row < 8; row++) {\n            this.board[row] = [];\n            for (let col = 0; col < 8; col++) {\n                if (row < 3 && (row + col) % 2 === 1) {\n                    this.board[row][col] = new CheckersPiece(PieceColor.Black);\n                }\n                else if (row > 4 && (row + col) % 2 === 1) {\n                    this.board[row][col] = new CheckersPiece(PieceColor.Red);\n                }\n                else {\n                    this.board[row][col] = null;\n                }\n            }\n        }\n    }\n    getPiece(row, col) {\n        return this.board[row][col];\n    }\n}\nclass CheckersGame {\n    constructor(playerOne, playerTwo, forcedJumps) {\n        this.board = new CheckersBoard().board;\n        this.players = [playerOne, playerTwo];\n        this.currentState = State.inProgress;\n        this.currentPlayer = playerOne;\n        this.winner = null;\n        this.numOfTurns = 0;\n        this.playerOneMoves = [];\n        this.playerTwoMoves = [];\n        this.forcedJumps = forcedJumps;\n        this.chainingRow = null;\n        this.chainingCol = null;\n    }\n    changeTurn() {\n        this.currentPlayer =\n            this.currentPlayer === this.players[0]\n                ? this.players[1]\n                : this.players[0];\n        this.numOfTurns++;\n        if (this.forcedJumps) {\n            if (this.capturesPossible()) {\n                this.currentPlayer.capturesAvailable = true;\n            }\n            else {\n                this.currentPlayer.capturesAvailable = false;\n            }\n        }\n    }\n    getPiece(row, col) {\n        return this.board[row][col];\n    }\n    validateMove(startRow, startCol, endRow, endCol) {\n        if (endRow < 0 || endRow >= 8 || endCol < 0 || endCol >= 8) {\n            return false;\n        }\n        const destinationSquare = this.getPiece(endRow, endCol);\n        const piece = this.getPiece(startRow, startCol);\n        if ((piece === null || piece === void 0 ? void 0 : piece.color) === PieceColor.Black && piece.isKing === false) {\n            return this.validateBlack(startRow, startCol, endRow, endCol, destinationSquare);\n        }\n        else if ((piece === null || piece === void 0 ? void 0 : piece.color) === PieceColor.Red && piece.isKing === false) {\n            return this.validateRed(startRow, startCol, endRow, endCol, destinationSquare);\n        }\n        if ((piece === null || piece === void 0 ? void 0 : piece.isKing) === true) {\n            if (Math.abs(startRow - endRow) === 1 &&\n                Math.abs(startCol - endCol) === 1) {\n                if (destinationSquare !== null) {\n                    return false;\n                }\n                return true;\n            }\n            else if (Math.abs(startRow - endRow) == 2 &&\n                Math.abs(startCol - endCol) == 2) {\n                return this.canCapture(startRow, startCol, endRow, endCol);\n            }\n        }\n        return false;\n    }\n    validateBlack(startRow, startCol, endRow, endCol, destinationSquare) {\n        if (endRow - startRow === 1 && Math.abs(startCol - endCol) === 1) {\n            if (destinationSquare !== null) {\n                return false;\n            }\n            return true;\n        }\n        else if (endRow - startRow === 2 && Math.abs(startCol - endCol) === 2) {\n            return this.canCapture(startRow, startCol, endRow, endCol);\n        }\n        else {\n            return false;\n        }\n    }\n    validateRed(startRow, startCol, endRow, endCol, destinationSquare) {\n        if (endRow - startRow === -1 && Math.abs(startCol - endCol) === 1) {\n            if (destinationSquare !== null) {\n                return false;\n            }\n            return true;\n        }\n        else if (endRow - startRow === -2 && Math.abs(startCol - endCol) === 2) {\n            return this.canCapture(startRow, startCol, endRow, endCol);\n        }\n        else {\n            return false;\n        }\n    }\n    possibleMoves(row, col) {\n        const piece = this.getPiece(row, col);\n        const moves = [];\n        if (piece !== null) {\n            const direction = piece.color === PieceColor.Black ? 1 : -1;\n            const startRow = row;\n            const startCol = col;\n            if (piece.isKing === false) {\n                const potentialMovesArr = [\n                    { endRow: startRow + direction, endCol: startCol - 1 },\n                    { endRow: startRow + direction, endCol: startCol + 1 },\n                    { endRow: startRow + 2 * direction, endCol: startCol - 2 },\n                    { endRow: startRow + 2 * direction, endCol: startCol + 2 },\n                ];\n                for (const move of potentialMovesArr) {\n                    if (this.validateMove(startRow, startCol, move.endRow, move.endCol)) {\n                        moves.push(new Moves(startRow, startCol, move.endRow, move.endCol));\n                    }\n                }\n            }\n            else {\n                const startRow = row;\n                const startCol = col;\n                const potentialMovesArr = [\n                    { endRow: startRow + 1, endCol: startCol - 1 },\n                    { endRow: startRow + 1, endCol: startCol + 1 },\n                    { endRow: startRow - 1, endCol: startCol - 1 },\n                    { endRow: startRow - 1, endCol: startCol + 1 },\n                    { endRow: startRow + 2, endCol: startCol - 2 },\n                    { endRow: startRow + 2, endCol: startCol + 2 },\n                    { endRow: startRow - 2, endCol: startCol - 2 },\n                    { endRow: startRow - 2, endCol: startCol + 2 },\n                ];\n                for (const move of potentialMovesArr) {\n                    if (this.validateMove(startRow, startCol, move.endRow, move.endCol)) {\n                        moves.push(new Moves(startRow, startCol, move.endRow, move.endCol));\n                    }\n                }\n            }\n        }\n        if (this.chainingRow !== null && this.chainingCol !== null) {\n            if (row !== this.chainingRow || col !== this.chainingCol) {\n                return [];\n            }\n            else {\n                return moves.filter((move) => Math.abs(move.startRow - move.endRow) === 2);\n            }\n        }\n        if (this.forcedJumps) {\n            if (this.currentPlayer.capturesAvailable) {\n                return moves.filter((move) => this.canCapture(move.startRow, move.startCol, move.endRow, move.endCol));\n            }\n        }\n        return moves;\n    }\n    canCapture(startRow, startCol, endRow, endCol) {\n        if (Math.abs(startRow - endRow) == 2 && Math.abs(startCol - endCol) == 2) {\n            const middleRow = (startRow + endRow) / 2;\n            const middleCol = (startCol + endCol) / 2;\n            const middlePiece = this.getPiece(middleRow, middleCol);\n            const currentPiece = this.getPiece(startRow, startCol);\n            if (currentPiece !== null && middlePiece !== null) {\n                if (middlePiece.color !== currentPiece.color) {\n                    const destinationSquare = this.getPiece(endRow, endCol);\n                    if (destinationSquare === null) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    movePiece(startRow, startCol, endRow, endCol) {\n        const piece = this.getPiece(startRow, startCol);\n        let capturedAlready = false;\n        if (piece && piece.color === this.currentPlayer.color) {\n            if (this.validateMove(startRow, startCol, endRow, endCol)) {\n                if (piece !== null) {\n                    const middleRow = Math.floor((startRow + endRow) / 2);\n                    const middleCol = Math.floor((startCol + endCol) / 2);\n                    const enemyPiece = this.getPiece(middleRow, middleCol);\n                    if (this.canCapture(startRow, startCol, endRow, endCol)) {\n                        this.handlePieceCapture(enemyPiece);\n                        if ((enemyPiece === null || enemyPiece === void 0 ? void 0 : enemyPiece.isKing) === true) {\n                            if (this.currentPlayer === this.players[0]) {\n                                this.players[1].numOfKings -= 1;\n                            }\n                            else {\n                                this.players[0].numOfKings -= 1;\n                            }\n                        }\n                        this.board[middleRow][middleCol] = null;\n                        capturedAlready = true;\n                        this.chainingRow = endRow;\n                        this.chainingCol = endCol;\n                    }\n                    else {\n                        capturedAlready = false;\n                    }\n                }\n                this.board[startRow][startCol] = null;\n                this.board[endRow][endCol] = piece;\n                if (this.currentPlayer === this.players[0]) {\n                    this.playerOneMoves.push(new Moves(startRow, startCol, endRow, endCol));\n                }\n                else {\n                    this.playerTwoMoves.push(new Moves(startRow, startCol, endRow, endCol));\n                }\n                if (piece.isKing === false) {\n                    if (this.promoteToKing(endRow, endCol) === true) {\n                        piece.makeKing();\n                        this.currentPlayer.numOfKings += 1;\n                    }\n                }\n                this.capturesPossible();\n                const nextCaptures = this.chainCaptures(endRow, endCol);\n                if (nextCaptures && capturedAlready === true) {\n                    if (nextCaptures.length > 0) {\n                        console.log(nextCaptures);\n                        this.chainingRow = endRow;\n                        this.chainingCol = endCol;\n                        return;\n                    }\n                    else {\n                        this.chainingRow = null;\n                        this.chainingCol = null;\n                        this.changeTurn();\n                    }\n                }\n                else {\n                    this.chainingRow = null;\n                    this.chainingCol = null;\n                    this.changeTurn();\n                }\n            }\n        }\n        console.log(this.numOfTurns);\n        console.log(`Number of Black Pieces: ${this.players[1].numOfPieces}, Kings: ${this.players[1].numOfKings}`);\n        console.log(`Number of Red Pieces: ${this.players[0].numOfPieces}, Kings: ${this.players[0].numOfKings}`);\n    }\n    handlePieceCapture(piece) {\n        if ((piece === null || piece === void 0 ? void 0 : piece.isKing) === true) {\n            this.currentPlayer.updateScore(2);\n            this.currentPlayer.updateCapturedPieces(1);\n        }\n        else {\n            this.currentPlayer.updateScore(1);\n            this.currentPlayer.updateCapturedPieces(1);\n        }\n        if (this.currentPlayer === this.players[0]) {\n            this.players[1].numOfPieces -= 1;\n        }\n        else {\n            this.players[0].numOfPieces -= 1;\n        }\n    }\n    promoteToKing(row, col) {\n        const piece = this.getPiece(row, col);\n        if ((piece === null || piece === void 0 ? void 0 : piece.color) == PieceColor.Red && row == 0) {\n            return true;\n        }\n        else if ((piece === null || piece === void 0 ? void 0 : piece.color) == PieceColor.Black && row == 7) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    chainCaptures(row, col) {\n        const moves = this.possibleMoves(row, col);\n        const captureMoves = moves.filter((move) => Math.abs(move.startRow - move.endRow) === 2);\n        return captureMoves.map((move) => ({\n            endRow: move.endRow,\n            endCol: move.endCol,\n        }));\n    }\n    capturesPossible() {\n        let flag = false;\n        for (let row = 0; row < 8; row++) {\n            for (let col = 0; col < 8; col++) {\n                const piece = this.getPiece(row, col);\n                if (piece && piece.color === this.currentPlayer.color) {\n                    const moves = this.possibleMoves(row, col);\n                    if (moves.some((move) => Math.abs(move.startRow - move.endRow) === 2)) {\n                        piece.captureCheck();\n                        flag = true;\n                    }\n                }\n            }\n        }\n        return flag;\n    }\n    isVulnerable(row, col) {\n        const piece = this.getPiece(row, col);\n        if (!piece)\n            return false;\n        const directions = piece.color === PieceColor.Black\n            ? [\n                [1, -1],\n                [1, 1],\n            ]\n            : [\n                [-1, -1],\n                [-1, 1],\n            ];\n        for (let [dr, dc] of directions) {\n            const opponentRow = row + dr;\n            const opponentCol = col + dc;\n            const landingRow = opponentRow + dr;\n            const landingCol = opponentCol + dc;\n            if (this.isValidPosition(opponentRow, opponentCol) &&\n                this.isValidPosition(landingRow, landingCol)) {\n                const opponentPiece = this.getPiece(opponentRow, opponentCol);\n                const landingSpot = this.getPiece(landingRow, landingCol);\n                if (opponentPiece &&\n                    opponentPiece.color !== piece.color &&\n                    !landingSpot) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    isValidPosition(row, col) {\n        return row >= 0 && row < 8 && col >= 0 && col < 8;\n    }\n    noPiecesLeft(player) {\n        if (player.numOfPieces === 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    noValidMoves() {\n        let validMoves = 0;\n        for (let row = 0; row < 8; row++) {\n            for (let col = 0; col < 8; col++) {\n                const piece = this.getPiece(row, col);\n                if (piece && piece.color === this.currentPlayer.color) {\n                    if (this.possibleMoves(row, col).length > 0) {\n                        validMoves++;\n                    }\n                }\n            }\n        }\n        if (validMoves === 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    checkEndOfGame() {\n        if (this.noPiecesLeft(this.players[0]) &&\n            this.players[1].numOfPieces >= 1) {\n            this.currentState = State.gameFinished;\n            this.winner = this.players[1];\n        }\n        else if (this.noPiecesLeft(this.players[1]) &&\n            this.players[0].numOfPieces >= 1) {\n            this.currentState = State.gameFinished;\n            this.winner = this.players[0];\n        }\n        else if (this.noValidMoves()) {\n            this.currentState = State.gameFinished;\n            if (this.players[0].score > this.players[1].score) {\n                this.winner = this.players[0];\n            }\n            else if (this.players[0].score < this.players[1].score) {\n                this.winner = this.players[1];\n            }\n            else {\n                this.winner = null;\n            }\n        }\n        else {\n            this.currentState = State.inProgress;\n        }\n    }\n    setAI(aiPlayer) {\n        this.players[1] = aiPlayer;\n    }\n    simulateMove(startRow, startCol, endRow, endCol) {\n        const piece = this.getPiece(startRow, startCol);\n        let capturedPieces = [];\n        let wasPromoted = false;\n        let currentRow = startRow, currentCol = startCol;\n        let moveRow = endRow, moveCol = endCol;\n        if (piece && this.validateMove(startRow, startCol, endRow, endCol)) {\n            let canContinueCapture = true;\n            while (canContinueCapture) {\n                if (this.canCapture(currentRow, currentCol, moveRow, moveCol)) {\n                    const middleRow = Math.floor((currentRow + moveRow) / 2);\n                    const middleCol = Math.floor((currentCol + moveCol) / 2);\n                    const capturedPiece = this.getPiece(middleRow, middleCol);\n                    if (capturedPiece) {\n                        capturedPieces.push({\n                            piece: capturedPiece,\n                            row: middleRow,\n                            col: middleCol,\n                        });\n                        this.board[middleRow][middleCol] = null;\n                        this.board[currentRow][currentCol] = null;\n                        this.board[moveRow][moveCol] = piece;\n                        if (piece.isKing === false) {\n                            if (this.promoteToKing(moveRow, moveCol) === true) {\n                                piece.makeKing();\n                                wasPromoted = true;\n                            }\n                        }\n                        currentRow = moveRow;\n                        currentCol = moveCol;\n                        const nextCaptures = this.chainCaptures(moveRow, moveCol);\n                        canContinueCapture = nextCaptures.length > 0;\n                        if (canContinueCapture) {\n                            moveRow = nextCaptures[0].endRow;\n                            moveCol = nextCaptures[0].endCol;\n                        }\n                    }\n                }\n                else {\n                    this.board[currentRow][currentCol] = null;\n                    this.board[moveRow][moveCol] = piece;\n                    currentRow = moveRow;\n                    currentCol = moveCol;\n                    if (piece.isKing === false) {\n                        if (this.promoteToKing(moveRow, moveCol) === true) {\n                            piece.makeKing();\n                            wasPromoted = true;\n                        }\n                    }\n                    canContinueCapture = false;\n                }\n            }\n        }\n        return [capturedPieces, wasPromoted, currentRow, currentCol];\n    }\n    moveAI(startRow, startCol, endRow, endCol) {\n        const piece = this.getPiece(startRow, startCol);\n        let capturedAlready = false;\n        if (piece && piece.color === this.currentPlayer.color) {\n            if (this.validateMove(startRow, startCol, endRow, endCol)) {\n                if (piece !== null) {\n                    const middleRow = Math.floor((startRow + endRow) / 2);\n                    const middleCol = Math.floor((startCol + endCol) / 2);\n                    if (this.canCapture(startRow, startCol, endRow, endCol)) {\n                        if (this.currentPlayer === this.players[0]) {\n                            this.players[1].numOfPieces -= 1;\n                        }\n                        else {\n                            this.players[0].numOfPieces -= 1;\n                        }\n                        this.board[middleRow][middleCol] = null;\n                        capturedAlready = true;\n                    }\n                    else {\n                        capturedAlready = false;\n                    }\n                }\n                this.board[startRow][startCol] = null;\n                this.board[endRow][endCol] = piece;\n                if (this.promoteToKing(endRow, endCol) === true) {\n                    piece.makeKing();\n                }\n                const nextCaptures = this.chainCaptures(endRow, endCol);\n                if (nextCaptures && capturedAlready === true) {\n                    if (nextCaptures.length > 0) {\n                        return;\n                    }\n                    else {\n                        this.changeTurn();\n                    }\n                }\n                else {\n                    this.changeTurn();\n                }\n            }\n        }\n    }\n    undoSimulation(startRow, startCol, finalRow, finalCol, capturedPieces, wasPromoted) {\n        const piece = this.getPiece(finalRow, finalCol);\n        this.board[finalRow][finalCol] = null;\n        this.board[startRow][startCol] = piece;\n        capturedPieces.forEach((capturedPiece) => {\n            this.board[capturedPiece.row][capturedPiece.col] = capturedPiece.piece;\n        });\n        if (wasPromoted && piece) {\n            piece.isKing = false;\n        }\n    }\n    deepCopyGame() {\n        const copiedGame = new CheckersGame(this.players[0].deepCopyPlayer(), this.players[1].deepCopyPlayer(), this.forcedJumps);\n        copiedGame.board = this.board.map((row) => row.map((piece) => (piece ? piece.deepCopyPiece() : null)));\n        copiedGame.currentPlayer = this.currentPlayer;\n        copiedGame.currentState = this.currentState;\n        copiedGame.winner = this.winner ? this.winner.deepCopyPlayer() : null;\n        return copiedGame;\n    }\n}\n\n\n//# sourceURL=webpack://project/./src/components/checkersGame.ts?");

/***/ }),

/***/ "./src/pages/checkers-dom.ts":
/*!***********************************!*\
  !*** ./src/pages/checkers-dom.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/checkersGame */ \"./src/components/checkersGame.ts\");\n/* harmony import */ var _components_checkersAI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/checkersAI */ \"./src/components/checkersAI.ts\");\n\n\nconst pieceEventListeners = new Map();\nlet game;\nconst startLocalGameBtn = document.querySelector(\".initial-screen .initial-screen-container .container .name-entry #startGameButton\");\nstartLocalGameBtn === null || startLocalGameBtn === void 0 ? void 0 : startLocalGameBtn.addEventListener(\"click\", startLocalGame);\nconst startAIGameBtn = document.querySelector(\".initial-screen .initial-screen-container .container .name-entry #startAIGameButton\");\nstartAIGameBtn === null || startAIGameBtn === void 0 ? void 0 : startAIGameBtn.addEventListener(\"click\", startAIGame);\nlet enforcedJumpCheck;\nconst checkBox = document.querySelector(\".initial-screen .initial-screen-container .container .name-entry #enforcedJumps\");\ncheckBox === null || checkBox === void 0 ? void 0 : checkBox.addEventListener(\"change\", (event) => {\n    const target = event.target;\n    if (target.checked) {\n        enforcedJumpCheck = true;\n        console.log(`Jumps: ${enforcedJumpCheck}`);\n    }\n    else {\n        enforcedJumpCheck = false;\n        console.log(`Jumps: ${enforcedJumpCheck}`);\n    }\n});\nconst restartLocalGameButton = document.getElementById(\"restartLocalGameButton\");\nconst restartAIGameButton = document.getElementById(\"restartAIGameButton\");\nconst endOfGameSection = document.querySelector(\".end-of-game-section\");\nconst winnerAnnouncement = document.getElementById(\"winnerAnnouncement\");\nconst playerOneFinalName = document.getElementById(\"playerOneFinalName\");\nconst playerOneFinalScore = document.getElementById(\"playerOneFinalScore\");\nconst playerOneFinalCaptured = document.getElementById(\"playerOneFinalCaptured\");\nconst playerTwoFinalName = document.getElementById(\"playerTwoFinalName\");\nconst playerTwoFinalScore = document.getElementById(\"playerTwoFinalScore\");\nconst playerTwoFinalCaptured = document.getElementById(\"playerTwoFinalCaptured\");\nconst playerOneName = document.querySelector(\".player-one .container .name\");\nconst playerOneScore = document.querySelector(\".player-one .container .score\");\nconst playerOneCaptured = document.querySelector(\".player-one .container .captured\");\nconst playerOneTurn = document.querySelector(\".player-one .container .turn\");\nconst playerTwoName = document.querySelector(\".player-two .container .name\");\nconst playerTwoScore = document.querySelector(\".player-two .container .score\");\nconst playerTwoCaptured = document.querySelector(\".player-two .container .captured\");\nconst playerTwoTurn = document.querySelector(\".player-two .container .turn\");\nconst rows = document.querySelectorAll(\".board-container .container .row\");\nfunction startLocalGame() {\n    const playerOneName = document.getElementById(\"playerOneName\").value ||\n        \"Player 1\";\n    const playerTwoName = document.getElementById(\"playerTwoName\").value ||\n        \"Player 2\";\n    const playerOne = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.Player(playerOneName, _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red);\n    const playerTwo = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.Player(playerTwoName, _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black);\n    game = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.CheckersGame(playerOne, playerTwo, enforcedJumpCheck);\n    updateScoreCard();\n    document.querySelector(\".initial-screen\").style.display =\n        \"none\";\n    document.querySelector(\".main\").style.display = \"block\";\n    populateBoard();\n}\nfunction startAIGame() {\n    const playerOneName = document.getElementById(\"playerOneName\").value ||\n        \"Player 1\";\n    const playerTwoName = \"Minimax-A/B\";\n    const playerOne = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.Player(playerOneName, _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Red);\n    const playerTwo = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.Player(playerTwoName, _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black);\n    game = new _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.CheckersGame(playerOne, playerTwo, enforcedJumpCheck);\n    const ai = new _components_checkersAI__WEBPACK_IMPORTED_MODULE_1__.CheckersAI(playerTwoName, _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black, game, 5);\n    game.setAI(ai);\n    updateScoreCard();\n    document.querySelector(\".initial-screen\").style.display =\n        \"none\";\n    document.querySelector(\".main\").style.display = \"block\";\n    populateBoard();\n}\nrestartLocalGameButton.addEventListener(\"click\", () => {\n    endOfGameSection.style.display = \"none\";\n    clearHighlights();\n    rows.forEach((row) => {\n        row.querySelectorAll(\".col\").forEach((col) => {\n            if (col.firstChild) {\n                const pieceDiv = col.firstChild;\n                const existingListener = pieceEventListeners.get(pieceDiv);\n                if (existingListener) {\n                    pieceDiv.removeEventListener(\"click\", existingListener);\n                    pieceEventListeners.delete(pieceDiv);\n                }\n                col.removeChild(col.firstChild);\n            }\n        });\n    });\n    startLocalGame();\n});\nrestartAIGameButton.addEventListener(\"click\", () => {\n    endOfGameSection.style.display = \"none\";\n    clearHighlights();\n    rows.forEach((row) => {\n        row.querySelectorAll(\".col\").forEach((col) => {\n            if (col.firstChild) {\n                const pieceDiv = col.firstChild;\n                const existingListener = pieceEventListeners.get(pieceDiv);\n                if (existingListener) {\n                    pieceDiv.removeEventListener(\"click\", existingListener);\n                    pieceEventListeners.delete(pieceDiv);\n                }\n                col.removeChild(col.firstChild);\n            }\n        });\n    });\n    startAIGame();\n});\nfunction populateBoard() {\n    updateScoreCard();\n    rows.forEach((row, rowIndex) => {\n        const cols = row.querySelectorAll(\".col\");\n        cols.forEach((col, colIndex) => {\n            const piece = game.getPiece(rowIndex, colIndex);\n            if (piece) {\n                const pieceDiv = document.createElement(\"div\");\n                if (piece.isKing === true) {\n                    pieceDiv.classList.add(piece.color === _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black\n                        ? \"black-piece-king\"\n                        : \"red-piece-king\");\n                }\n                else {\n                    pieceDiv.classList.add(piece.color === _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.PieceColor.Black ? \"black-piece\" : \"red-piece\");\n                }\n                col.appendChild(pieceDiv);\n                pieceDiv.addEventListener(\"click\", selectPiece.bind(null, rowIndex, colIndex, pieceDiv));\n            }\n        });\n    });\n}\nfunction clearHighlights() {\n    document.querySelectorAll(\".highlight\").forEach((highlightedElement) => {\n        const highlighted = highlightedElement;\n        highlighted.classList.remove(\"highlight\");\n        const moveListener = pieceEventListeners.get(highlighted);\n        if (moveListener) {\n            highlighted.removeEventListener(\"click\", moveListener);\n            pieceEventListeners.delete(highlighted);\n        }\n    });\n}\nfunction selectPiece(rowIndex, colIndex, pieceDiv) {\n    const piece = game.getPiece(rowIndex, colIndex);\n    clearHighlights();\n    document.querySelectorAll(\".black-piece, .red-piece\").forEach((p) => {\n        p.classList.remove(\"selected\");\n    });\n    document\n        .querySelectorAll(\".black-piece-king, .red-piece-king\")\n        .forEach((p) => {\n        p.classList.remove(\"selected\");\n    });\n    if (piece && piece.color === game.currentPlayer.color) {\n        pieceDiv.classList.toggle(\"selected\");\n        const moves = game.possibleMoves(rowIndex, colIndex);\n        if (moves.length > 0) {\n            moves.forEach((move) => {\n                const targetCell = document.querySelector(`.col[data-row='${move.endRow}'][data-col='${move.endCol}']`);\n                if (targetCell) {\n                    targetCell.classList.add(\"highlight\");\n                    const existingListener = pieceEventListeners.get(targetCell);\n                    if (existingListener) {\n                        targetCell.removeEventListener(\"click\", existingListener);\n                    }\n                    const moveListener = () => {\n                        executeMove(rowIndex, colIndex, move.endRow, move.endCol);\n                    };\n                    targetCell.addEventListener(\"click\", moveListener);\n                    pieceEventListeners.set(targetCell, moveListener);\n                }\n            });\n        }\n    }\n}\nfunction executeMove(startRow, startCol, endRow, endCol) {\n    const piece = game.getPiece(startRow, startCol);\n    if (piece && piece.color === game.currentPlayer.color) {\n        game.movePiece(startRow, startCol, endRow, endCol);\n        updateBoardDOM();\n        if (game.players[1] instanceof _components_checkersAI__WEBPACK_IMPORTED_MODULE_1__.CheckersAI) {\n            while (game.currentPlayer === game.players[1]) {\n                game.players[1].makeMove();\n                updateBoardDOM();\n            }\n        }\n        const pieceAtEnd = game.getPiece(endRow, endCol);\n        const pieceAtStart = game.getPiece(startRow, startCol);\n        if (!pieceAtStart && pieceAtEnd) {\n            console.log(`${piece.color} piece has moved from (${startRow}, ${startCol}) to (${endRow}, ${endCol})`);\n        }\n    }\n}\nfunction updateScoreCard() {\n    playerOneName.textContent = `${game.players[0].name}`;\n    playerOneScore.textContent = `Score: ${game.players[0].score}`;\n    playerOneCaptured.textContent = `Captured Pieces: ${game.players[0].capturedPieces}`;\n    playerTwoName.textContent = `${game.players[1].name}`;\n    playerTwoScore.textContent = `Score: ${game.players[1].score}`;\n    playerTwoCaptured.textContent = `Captured Pieces: ${game.players[1].capturedPieces}`;\n    if (game.currentPlayer === game.players[0]) {\n        playerOneTurn.textContent = `Turn: Yes`;\n        playerTwoTurn.textContent = `Turn: No`;\n    }\n    else {\n        playerOneTurn.textContent = `Turn: No`;\n        playerTwoTurn.textContent = `Turn: Yes`;\n    }\n    game.checkEndOfGame();\n    if (game.currentState === _components_checkersGame__WEBPACK_IMPORTED_MODULE_0__.State.gameFinished) {\n        if (game.winner === game.players[0]) {\n            playerOneName.textContent = `${game.players[0].name} has won the game!`;\n            playerTwoName.textContent = `${game.players[1].name}, you lost, homie!`;\n        }\n        else if (game.winner === game.players[1]) {\n            playerOneName.textContent = `${game.players[0].name}, you lost, homie!`;\n            playerTwoName.textContent = `${game.players[1].name} has won the game!`;\n        }\n        else {\n            playerOneName.textContent = \"Game is a draw!\";\n            playerTwoName.textContent = \"Game is a draw!\";\n        }\n        playerOneTurn.textContent = ``;\n        playerTwoTurn.textContent = ``;\n        endOfGameSection.style.display = \"flex\";\n        winnerAnnouncement.textContent = game.winner\n            ? `Winner: ${game.winner.name}`\n            : \"It's a draw!\";\n        playerOneFinalName.textContent = game.players[0].name;\n        playerOneFinalScore.textContent = `Score: ${game.players[0].score}`;\n        playerOneFinalCaptured.textContent = `Captured Pieces: ${game.players[0].capturedPieces}`;\n        playerTwoFinalName.textContent = game.players[1].name;\n        playerTwoFinalScore.textContent = `Score: ${game.players[1].score}`;\n        playerTwoFinalCaptured.textContent = `Captured Pieces: ${game.players[1].capturedPieces}`;\n    }\n}\nfunction updateBoardDOM() {\n    clearHighlights();\n    rows.forEach((row) => {\n        row.querySelectorAll(\".col\").forEach((col) => {\n            if (col.firstChild) {\n                const pieceDiv = col.firstChild;\n                const existingListener = pieceEventListeners.get(pieceDiv);\n                if (existingListener) {\n                    pieceDiv.removeEventListener(\"click\", existingListener);\n                    pieceEventListeners.delete(pieceDiv);\n                }\n                col.removeChild(col.firstChild);\n            }\n        });\n    });\n    populateBoard();\n}\n\n\n//# sourceURL=webpack://project/./src/pages/checkers-dom.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/pages/checkers-dom.ts");
/******/ 	
/******/ })()
;