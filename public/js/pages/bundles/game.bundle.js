(()=>{"use strict";var e,t;!function(e){e[e.inProgress=0]="inProgress",e[e.gameFinished=1]="gameFinished"}(e||(e={}));class n{constructor(e,t){this.name=e,this.color=t,this.score=0,this.capturedPieces=0,this.numOfPieces=12,this.numOfKings=0,this.capturesAvailable=!1}updateCapturedPieces(e){this.capturedPieces+=e}updateScore(e){this.score+=e}deepCopyPlayer(){let e=new n(this.name,this.color);return e.numOfPieces=this.numOfPieces,e.numOfKings=this.numOfKings,e}}!function(e){e.Black="black",e.Red="red"}(t||(t={}));class i{constructor(e,t=!1,n=!1){this.color=e,this.isKing=t,this.captureStatus=!1}makeKing(){this.isKing=!0}captureCheck(){this.captureStatus=!0}deepCopyPiece(){return new i(this.color,this.isKing)}}class s{constructor(e,t,n,i){this.startRow=e,this.startCol=t,this.endRow=n,this.endCol=i}equals(e){return this.startRow===e.startRow&&this.startCol===e.startCol&&this.endRow===e.endRow&&this.endCol===e.endCol}}class o{constructor(){this.board=[],this.initializeBoard()}initializeBoard(){for(let e=0;e<8;e++){this.board[e]=[];for(let n=0;n<8;n++)this.board[e][n]=e<3&&(e+n)%2==1?new i(t.Black):e>4&&(e+n)%2==1?new i(t.Red):null}}getPiece(e,t){return this.board[e][t]}}class r{constructor(t,n,i){this.board=(new o).board,this.players=[t,n],this.currentState=e.inProgress,this.currentPlayer=t,this.winner=null,this.numOfTurns=0,this.playerOneMoves=[],this.playerTwoMoves=[],this.forcedJumps=i,this.chainingRow=null,this.chainingCol=null}changeTurn(){this.currentPlayer=this.currentPlayer===this.players[0]?this.players[1]:this.players[0],this.numOfTurns++,this.forcedJumps&&(this.capturesPossible()?this.currentPlayer.capturesAvailable=!0:this.currentPlayer.capturesAvailable=!1)}getPiece(e,t){return this.board[e][t]}validateMove(e,n,i,s){if(i<0||i>=8||s<0||s>=8)return!1;const o=this.getPiece(i,s),r=this.getPiece(e,n);if((null==r?void 0:r.color)===t.Black&&!1===r.isKing)return this.validateBlack(e,n,i,s,o);if((null==r?void 0:r.color)===t.Red&&!1===r.isKing)return this.validateRed(e,n,i,s,o);if(!0===(null==r?void 0:r.isKing)){if(1===Math.abs(e-i)&&1===Math.abs(n-s))return null===o;if(2==Math.abs(e-i)&&2==Math.abs(n-s))return this.canCapture(e,n,i,s)}return!1}validateBlack(e,t,n,i,s){return n-e==1&&1===Math.abs(t-i)?null===s:n-e==2&&2===Math.abs(t-i)&&this.canCapture(e,t,n,i)}validateRed(e,t,n,i,s){return n-e==-1&&1===Math.abs(t-i)?null===s:n-e==-2&&2===Math.abs(t-i)&&this.canCapture(e,t,n,i)}possibleMoves(e,n){const i=this.getPiece(e,n),o=[];if(null!==i){const r=i.color===t.Black?1:-1,l=e,a=n;if(!1===i.isKing){const e=[{endRow:l+r,endCol:a-1},{endRow:l+r,endCol:a+1},{endRow:l+2*r,endCol:a-2},{endRow:l+2*r,endCol:a+2}];for(const t of e)this.validateMove(l,a,t.endRow,t.endCol)&&o.push(new s(l,a,t.endRow,t.endCol))}else{const t=e,i=n,r=[{endRow:t+1,endCol:i-1},{endRow:t+1,endCol:i+1},{endRow:t-1,endCol:i-1},{endRow:t-1,endCol:i+1},{endRow:t+2,endCol:i-2},{endRow:t+2,endCol:i+2},{endRow:t-2,endCol:i-2},{endRow:t-2,endCol:i+2}];for(const e of r)this.validateMove(t,i,e.endRow,e.endCol)&&o.push(new s(t,i,e.endRow,e.endCol))}}return null!==this.chainingRow&&null!==this.chainingCol?e!==this.chainingRow||n!==this.chainingCol?[]:o.filter((e=>2===Math.abs(e.startRow-e.endRow))):this.forcedJumps&&this.currentPlayer.capturesAvailable?o.filter((e=>this.canCapture(e.startRow,e.startCol,e.endRow,e.endCol))):o}canCapture(e,t,n,i){if(2==Math.abs(e-n)&&2==Math.abs(t-i)){const s=(e+n)/2,o=(t+i)/2,r=this.getPiece(s,o),l=this.getPiece(e,t);if(null!==l&&null!==r&&r.color!==l.color&&null===this.getPiece(n,i))return!0}return!1}movePiece(e,t,n,i){const o=this.getPiece(e,t);let r=!1;if(o&&o.color===this.currentPlayer.color&&this.validateMove(e,t,n,i)){if(null!==o){const s=Math.floor((e+n)/2),o=Math.floor((t+i)/2),l=this.getPiece(s,o);this.canCapture(e,t,n,i)?(this.handlePieceCapture(l),!0===(null==l?void 0:l.isKing)&&(this.currentPlayer===this.players[0]?this.players[1].numOfKings-=1:this.players[0].numOfKings-=1),this.board[s][o]=null,r=!0,this.chainingRow=n,this.chainingCol=i):r=!1}this.board[e][t]=null,this.board[n][i]=o,this.currentPlayer===this.players[0]?this.playerOneMoves.push(new s(e,t,n,i)):this.playerTwoMoves.push(new s(e,t,n,i)),!1===o.isKing&&!0===this.promoteToKing(n,i)&&(o.makeKing(),this.currentPlayer.numOfKings+=1),this.capturesPossible();const l=this.chainCaptures(n,i);if(l&&!0===r){if(l.length>0)return console.log(l),this.chainingRow=n,void(this.chainingCol=i);this.chainingRow=null,this.chainingCol=null,this.changeTurn()}else this.chainingRow=null,this.chainingCol=null,this.changeTurn()}console.log(this.numOfTurns),console.log(`Number of Black Pieces: ${this.players[1].numOfPieces}, Kings: ${this.players[1].numOfKings}`),console.log(`Number of Red Pieces: ${this.players[0].numOfPieces}, Kings: ${this.players[0].numOfKings}`)}handlePieceCapture(e){!0===(null==e?void 0:e.isKing)?(this.currentPlayer.updateScore(2),this.currentPlayer.updateCapturedPieces(1)):(this.currentPlayer.updateScore(1),this.currentPlayer.updateCapturedPieces(1)),this.currentPlayer===this.players[0]?this.players[1].numOfPieces-=1:this.players[0].numOfPieces-=1}promoteToKing(e,n){const i=this.getPiece(e,n);return(null==i?void 0:i.color)==t.Red&&0==e||(null==i?void 0:i.color)==t.Black&&7==e}chainCaptures(e,t){return this.possibleMoves(e,t).filter((e=>2===Math.abs(e.startRow-e.endRow))).map((e=>({endRow:e.endRow,endCol:e.endCol})))}capturesPossible(){let e=!1;for(let t=0;t<8;t++)for(let n=0;n<8;n++){const i=this.getPiece(t,n);i&&i.color===this.currentPlayer.color&&this.possibleMoves(t,n).some((e=>2===Math.abs(e.startRow-e.endRow)))&&(i.captureCheck(),e=!0)}return e}isVulnerable(e,n){const i=this.getPiece(e,n);if(!i)return!1;const s=i.color===t.Black?[[1,-1],[1,1]]:[[-1,-1],[-1,1]];for(let[t,o]of s){const s=e+t,r=n+o,l=s+t,a=r+o;if(this.isValidPosition(s,r)&&this.isValidPosition(l,a)){const e=this.getPiece(s,r),t=this.getPiece(l,a);if(e&&e.color!==i.color&&!t)return!0}}return!1}isValidPosition(e,t){return e>=0&&e<8&&t>=0&&t<8}noPiecesLeft(e){return 0===e.numOfPieces}noValidMoves(){let e=0;for(let t=0;t<8;t++)for(let n=0;n<8;n++){const i=this.getPiece(t,n);i&&i.color===this.currentPlayer.color&&this.possibleMoves(t,n).length>0&&e++}return 0===e}checkEndOfGame(){this.noPiecesLeft(this.players[0])&&this.players[1].numOfPieces>=1?(this.currentState=e.gameFinished,this.winner=this.players[1]):this.noPiecesLeft(this.players[1])&&this.players[0].numOfPieces>=1?(this.currentState=e.gameFinished,this.winner=this.players[0]):this.noValidMoves()?(this.currentState=e.gameFinished,this.players[0].score>this.players[1].score?this.winner=this.players[0]:this.players[0].score<this.players[1].score?this.winner=this.players[1]:this.winner=null):this.currentState=e.inProgress}setAI(e){this.players[1]=e}simulateMove(e,t,n,i){const s=this.getPiece(e,t);let o=[],r=!1,l=e,a=t,c=n,h=i;if(s&&this.validateMove(e,t,n,i)){let e=!0;for(;e;)if(this.canCapture(l,a,c,h)){const t=Math.floor((l+c)/2),n=Math.floor((a+h)/2),i=this.getPiece(t,n);if(i){o.push({piece:i,row:t,col:n}),this.board[t][n]=null,this.board[l][a]=null,this.board[c][h]=s,!1===s.isKing&&!0===this.promoteToKing(c,h)&&(s.makeKing(),r=!0),l=c,a=h;const u=this.chainCaptures(c,h);e=u.length>0,e&&(c=u[0].endRow,h=u[0].endCol)}}else this.board[l][a]=null,this.board[c][h]=s,l=c,a=h,!1===s.isKing&&!0===this.promoteToKing(c,h)&&(s.makeKing(),r=!0),e=!1}return[o,r,l,a]}moveAI(e,t,n,i){const s=this.getPiece(e,t);let o=!1;if(s&&s.color===this.currentPlayer.color&&this.validateMove(e,t,n,i)){if(null!==s){const s=Math.floor((e+n)/2),r=Math.floor((t+i)/2);this.canCapture(e,t,n,i)?(this.currentPlayer===this.players[0]?this.players[1].numOfPieces-=1:this.players[0].numOfPieces-=1,this.board[s][r]=null,o=!0):o=!1}this.board[e][t]=null,this.board[n][i]=s,!0===this.promoteToKing(n,i)&&s.makeKing();const r=this.chainCaptures(n,i);if(r&&!0===o){if(r.length>0)return;this.changeTurn()}else this.changeTurn()}}undoSimulation(e,t,n,i,s,o){const r=this.getPiece(n,i);this.board[n][i]=null,this.board[e][t]=r,s.forEach((e=>{this.board[e.row][e.col]=e.piece})),o&&r&&(r.isKing=!1)}deepCopyGame(){const e=new r(this.players[0].deepCopyPlayer(),this.players[1].deepCopyPlayer(),this.forcedJumps);return e.board=this.board.map((e=>e.map((e=>e?e.deepCopyPiece():null)))),e.currentPlayer=this.currentPlayer,e.currentState=this.currentState,e.winner=this.winner?this.winner.deepCopyPlayer():null,e}}class l extends n{constructor(e,t,n,i){super(e,t),this.game=n,this.depth=i,this.openings=this.openingSet(),this.currentOpening=null}heuristic(e){let n=0,i=0,s=0;n+=15*e.players[1].numOfPieces-15*e.players[0].numOfPieces,n-=this.countOpponentCapturesPossible(t.Red,e);for(let o=0;o<8;o++)for(let r=0;r<8;r++){let l=e.getPiece(o,r);if(l){if(l.color===t.Black&&!0===l.isKing?i++:l.color===t.Red&&!0===l.isKing&&s++,r>=2&&r<=5&&o>=3&&o<=4&&(n+=l.color===t.Black?2.5:-2.5),o>=3&&o<=4&&r<2&&r>5&&(n+=l.color===t.Black?.5:-.5),e.numOfTurns<10&&(l.color===t.Black&&0===o?1!==r&&5!==r||(n+=10):l.color===t.Red&&7===o&&(2!==r&&6!==r||(n-=10))),o>=1&&o<=6&&r>=1&&r<=6){let i=l.color===t.Black?o-1:o+1,s=e.getPiece(i,r-1),a=e.getPiece(i,r+1);s&&s.color===l.color&&(n+=l.color===t.Black?6:-6),a&&a.color===l.color&&(n+=l.color===t.Black?6:-6)}e.numOfTurns<15&&l.color===t.Black&&(0===o&&(1!==r&&3!==r&&5!=r||(n+=5)),1===o&&(2!==r&&4!==r||(n+=5)),2===o&&3===r&&(n+=5)),e.isVulnerable(o,r)||(n+=l.color===t.Black?-6:6)}}return n+=20*i-20*s,n}countOpponentCapturesPossible(e,t){let n=0;for(let i=0;i<8;i++)for(let s=0;s<8;s++){const o=t.getPiece(i,s);o&&o.color===e&&(n+=t.possibleMoves(i,s).filter((e=>2===Math.abs(e.startRow-e.endRow))).length)}return n}openingSet(){const e=new Map;return e.set("Old Fourteenth",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(7,0,6,1)]),e.set("Alma",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(7,2,6,1)]),e.set("Centre",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(4,3,3,4)]),e.set("Glasgow",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(5,2,4,1)]),e.set("Laird and Lady",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(5,6,4,7),new s(3,6,4,5),new s(5,4,3,6),new s(2,7,4,5)]),e.set("Black Doctor",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(5,6,4,7),new s(3,6,4,5),new s(5,4,3,6),new s(3,2,5,4),new s(6,3,4,5)]),e.set("Laird and Lady Refused",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(5,6,4,7),new s(1,6,2,5)]),e.set("Glasgow-Whilter",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,6),new s(5,6,4,5),new s(1,6,2,5),new s(5,2,4,1),new s(1,4,2,3)]),e.set("Nailor",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(1,4,2,3)]),e.set("Tillicoultry",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(2,5,3,4)]),e.set("Will o' the Wisp",[new s(5,2,4,3),new s(2,3,3,2),new s(5,6,4,7)]),e.set("Defiance",[new s(5,2,4,3),new s(2,3,3,2),new s(5,6,4,5),new s(1,2,2,3)]),e.set("Fife",[new s(5,2,4,3),new s(2,3,3,2),new s(5,6,4,5),new s(2,5,3,6),new s(6,7,5,6)]),e.set("Souter",[new s(5,2,4,3),new s(2,3,3,2),new s(5,6,4,5),new s(2,5,3,6),new s(6,5,5,6)]),e.set("Whilter-I",[new s(5,2,4,3),new s(2,3,3,2),new s(5,6,4,5),new s(2,5,3,6),new s(6,3,5,2)]),e.set("Whilter-II",[new s(5,2,4,3),new s(2,3,3,2),new s(6,3,5,2)]),e.set("Whilter-Exchange",[new s(5,2,4,3),new s(2,3,3,2),new s(6,3,5,2),new s(2,5,3,4)]),e.set("Maid of the Mill",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(3,6,4,7),new s(4,3,3,4)]),e.set("Douglas",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(3,6,4,7),new s(7,0,6,1),new s(1,6,2,5)]),e.set("Pioneer",[new s(5,2,4,3),new s(2,3,3,2),new s(6,1,5,2),new s(1,6,2,5)]),e.set("White Dyke",[new s(5,2,4,3),new s(2,5,3,6),new s(6,1,5,2),new s(3,6,4,5)]),e.set("Wagram",[new s(5,2,4,3),new s(2,5,3,6),new s(5,6,4,7),new s(2,1,3,0)]),e.set("Boston",[new s(5,2,4,3),new s(2,5,3,6),new s(5,6,4,7),new s(3,6,4,5)]),e.set("Dyke",[new s(5,2,4,3),new s(2,5,3,6),new s(4,3,3,2)]),e.set("Cross",[new s(5,2,4,3),new s(2,3,3,4)]),e.set("Waterloo",[new s(5,2,4,3),new s(2,3,3,4),new s(6,1,5,2),new s(3,4,4,5)]),e.set("Ayrshire Lassie",[new s(5,2,4,3),new s(2,1,3,0),new s(6,1,5,2),new s(1,0,2,1)]),e.set("Switcher",[new s(5,2,4,3),new s(2,7,3,6)]),e.set("Single Corner",[new s(5,2,4,3),new s(2,5,3,4)]),e.set("Second Double Corner",[new s(5,2,4,3),new s(2,1,3,2)]),e.set("Bristol",[new s(5,2,4,1),new s(2,1,3,0),new s(4,1,3,2)]),e.set("Paisley",[new s(5,2,4,1),new s(2,1,3,2)]),e.set("Bristol-Cross",[new s(5,2,4,1),new s(2,3,3,4)]),e}identifyOpening(){let e=!1;if(this.game.numOfTurns<Math.max(...Array.from(this.openings.values()).map((e=>e.length))))for(const[t,n]of this.openings)if(this.game.playerOneMoves.length<=n.length/2&&this.game.playerOneMoves.every(((e,t)=>n[2*t].equals(e)))){this.currentOpening=t,e=!0;break}e||(this.currentOpening=null)}minimax(n,i,s,o,r){if(n.checkEndOfGame(),0==i||n.currentState===e.gameFinished)return[this.heuristic(n),null];let l=r?-1/0:1/0,a=null;if(r){for(let e=0;e<8;e++)for(let r=0;r<8;r++){const c=n.getPiece(e,r);if(c&&c.color===t.Black){const t=n.possibleMoves(e,r);for(const e of t){const t=n.deepCopyGame();t.moveAI(e.startRow,e.startCol,e.endRow,e.endCol);const[r]=this.minimax(t,i-1,s,o,!1);if(o<=(s=Math.max(s,r))){a=e,l=r;break}r>l&&(l=r,a=e)}}}return[l,a]}for(let e=0;e<8;e++)for(let r=0;r<8;r++){const c=n.getPiece(e,r);if(c&&c.color===t.Red){const t=n.possibleMoves(e,r);for(const e of t){const t=n.deepCopyGame();t.moveAI(e.startRow,e.startCol,e.endRow,e.endCol);const[r]=this.minimax(t,i-1,s,o,!0);if((o=Math.min(o,r))<=s){a=e,l=r;break}r<l&&(l=r,a=e)}}}return[l,a]}makeMove(){if(this.game.currentState===e.gameFinished)console.log("Game is finished. AI cannot make a move."),this.game.changeTurn();else if(this.identifyOpening(),this.currentOpening){const e=this.getOpeningMove();e?this.game.movePiece(e.startRow,e.startCol,e.endRow,e.endCol):this.playMinimaxMove()}else 1===this.game.numOfTurns&&null===this.game.getPiece(3,4)?this.game.movePiece(2,5,3,4):3===this.game.numOfTurns&&null===this.game.getPiece(2,5)?this.game.movePiece(1,6,2,5):5===this.game.numOfTurns&&null===this.game.getPiece(1,6)?this.game.movePiece(0,7,1,6):this.playMinimaxMove()}playMinimaxMove(){const[e,t]=this.minimax(this.game,this.depth,-1/0,1/0,!0);t?(this.game.movePiece(null==t?void 0:t.startRow,null==t?void 0:t.startCol,null==t?void 0:t.endRow,null==t?void 0:t.endCol),console.log(`AI moved from: (${null==t?void 0:t.startRow}, ${null==t?void 0:t.startCol}) to (${null==t?void 0:t.endRow}, ${null==t?void 0:t.endCol})`),console.log(`Evaluated Score of move: ${e}`)):(console.log(`${this.game.players[1].name} has no valid moves!`),this.game.changeTurn())}getOpeningMove(){if(this.currentOpening){const e=this.openings.get(this.currentOpening);if(e&&this.game.numOfTurns<e.length)return e[this.game.numOfTurns]}return null}}const a=new Map;let c;const h=document.querySelector(".initial-screen .initial-screen-container .container .name-entry #startGameButton");null==h||h.addEventListener("click",$);const u=document.querySelector(".initial-screen .initial-screen-container .container .name-entry #startAIGameButton");let d;null==u||u.addEventListener("click",L);const w=document.querySelector(".initial-screen .initial-screen-container .container .name-entry #enforcedJumps");null==w||w.addEventListener("change",(e=>{e.target.checked?(d=!0,console.log(`Jumps: ${d}`)):(d=!1,console.log(`Jumps: ${d}`))}));const m=document.getElementById("restartLocalGameButton"),p=document.getElementById("restartAIGameButton"),g=document.querySelector(".end-of-game-section"),y=document.getElementById("winnerAnnouncement"),f=document.getElementById("playerOneFinalName"),C=document.getElementById("playerOneFinalScore"),P=document.getElementById("playerOneFinalCaptured"),v=document.getElementById("playerTwoFinalName"),b=document.getElementById("playerTwoFinalScore"),R=document.getElementById("playerTwoFinalCaptured"),k=document.querySelector(".player-one .container .name"),M=document.querySelector(".player-one .container .score"),O=document.querySelector(".player-one .container .captured"),S=document.querySelector(".player-one .container .turn"),B=document.querySelector(".player-two .container .name"),E=document.querySelector(".player-two .container .score"),x=document.querySelector(".player-two .container .captured"),K=document.querySelector(".player-two .container .turn"),T=document.querySelectorAll(".board-container .container .row");function $(){const e=document.getElementById("playerOneName").value||"Player 1",i=document.getElementById("playerTwoName").value||"Player 2",s=new n(e,t.Red),o=new n(i,t.Black);c=new r(s,o,d),F(),document.querySelector(".initial-screen").style.display="none",document.querySelector(".main").style.display="block",q()}function L(){const e=document.getElementById("playerOneName").value||"Player 1",i="Minimax-A/B",s=new n(e,t.Red),o=new n(i,t.Black);c=new r(s,o,d);const a=new l(i,t.Black,c,5);c.setAI(a),F(),document.querySelector(".initial-screen").style.display="none",document.querySelector(".main").style.display="block",q()}function q(){F(),T.forEach(((e,n)=>{e.querySelectorAll(".col").forEach(((e,i)=>{const s=c.getPiece(n,i);if(s){const o=document.createElement("div");!0===s.isKing?o.classList.add(s.color===t.Black?"black-piece-king":"red-piece-king"):o.classList.add(s.color===t.Black?"black-piece":"red-piece"),e.appendChild(o),o.addEventListener("click",I.bind(null,n,i,o))}}))}))}function A(){document.querySelectorAll(".highlight").forEach((e=>{const t=e;t.classList.remove("highlight");const n=a.get(t);n&&(t.removeEventListener("click",n),a.delete(t))}))}function I(e,t,n){const i=c.getPiece(e,t);if(A(),document.querySelectorAll(".black-piece, .red-piece").forEach((e=>{e.classList.remove("selected")})),document.querySelectorAll(".black-piece-king, .red-piece-king").forEach((e=>{e.classList.remove("selected")})),i&&i.color===c.currentPlayer.color){n.classList.toggle("selected");const i=c.possibleMoves(e,t);i.length>0&&i.forEach((n=>{const i=document.querySelector(`.col[data-row='${n.endRow}'][data-col='${n.endCol}']`);if(i){i.classList.add("highlight");const s=a.get(i);s&&i.removeEventListener("click",s);const o=()=>{!function(e,t,n,i){const s=c.getPiece(e,t);if(s&&s.color===c.currentPlayer.color){if(c.movePiece(e,t,n,i),G(),c.players[1]instanceof l)for(;c.currentPlayer===c.players[1];)c.players[1].makeMove(),G();const o=c.getPiece(n,i);!c.getPiece(e,t)&&o&&console.log(`${s.color} piece has moved from (${e}, ${t}) to (${n}, ${i})`)}}(e,t,n.endRow,n.endCol)};i.addEventListener("click",o),a.set(i,o)}}))}}function F(){k.textContent=`${c.players[0].name}`,M.textContent=`Score: ${c.players[0].score}`,O.textContent=`Captured Pieces: ${c.players[0].capturedPieces}`,B.textContent=`${c.players[1].name}`,E.textContent=`Score: ${c.players[1].score}`,x.textContent=`Captured Pieces: ${c.players[1].capturedPieces}`,c.currentPlayer===c.players[0]?(S.textContent="Turn: Yes",K.textContent="Turn: No"):(S.textContent="Turn: No",K.textContent="Turn: Yes"),c.checkEndOfGame(),c.currentState===e.gameFinished&&(c.winner===c.players[0]?(k.textContent=`${c.players[0].name} has won the game!`,B.textContent=`${c.players[1].name}, you lost, homie!`):c.winner===c.players[1]?(k.textContent=`${c.players[0].name}, you lost, homie!`,B.textContent=`${c.players[1].name} has won the game!`):(k.textContent="Game is a draw!",B.textContent="Game is a draw!"),S.textContent="",K.textContent="",g.style.display="flex",y.textContent=c.winner?`Winner: ${c.winner.name}`:"It's a draw!",f.textContent=c.players[0].name,C.textContent=`Score: ${c.players[0].score}`,P.textContent=`Captured Pieces: ${c.players[0].capturedPieces}`,v.textContent=c.players[1].name,b.textContent=`Score: ${c.players[1].score}`,R.textContent=`Captured Pieces: ${c.players[1].capturedPieces}`)}function G(){A(),T.forEach((e=>{e.querySelectorAll(".col").forEach((e=>{if(e.firstChild){const t=e.firstChild,n=a.get(t);n&&(t.removeEventListener("click",n),a.delete(t)),e.removeChild(e.firstChild)}}))})),q()}m.addEventListener("click",(()=>{g.style.display="none",A(),T.forEach((e=>{e.querySelectorAll(".col").forEach((e=>{if(e.firstChild){const t=e.firstChild,n=a.get(t);n&&(t.removeEventListener("click",n),a.delete(t)),e.removeChild(e.firstChild)}}))})),$()})),p.addEventListener("click",(()=>{g.style.display="none",A(),T.forEach((e=>{e.querySelectorAll(".col").forEach((e=>{if(e.firstChild){const t=e.firstChild,n=a.get(t);n&&(t.removeEventListener("click",n),a.delete(t)),e.removeChild(e.firstChild)}}))})),L()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,